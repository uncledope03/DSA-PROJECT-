This is the whole code copy it and run it on your netbeans


package phonebook;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.util.ArrayList;

public class Phonebook implements ActionListener {

    private JFrame frame;
    private JTextField nameField, phoneField, searchField;
    private JTextArea contactDisplayArea;
    private DefaultListModel<Contact> contactListModel;
    private JTabbedPane tabbedPane;
    private JList<Contact> contactList;
    private JScrollPane scrollPane;

    public Phonebook() {
        // Initialize the frame
        frame = new JFrame("Contact Book");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 500);
        frame.getContentPane().setBackground(Color.LIGHT_GRAY);

        // Initialize components
        nameField = new JTextField(15);
        phoneField = new JTextField(15);
        searchField = new JTextField(15);
        contactDisplayArea = new JTextArea(10, 30);
        contactDisplayArea.setEditable(false);
        contactDisplayArea.setBackground(Color.WHITE);
        contactDisplayArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));

        contactListModel = new DefaultListModel<>();
        contactList = new JList<>(contactListModel);
        contactList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        scrollPane = new JScrollPane(contactList);

        // Create tabbed pane
        tabbedPane = new JTabbedPane();

        // Tab for adding contacts
        JPanel addPanel = new JPanel();
        addPanel.setBackground(Color.WHITE);
        addPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        gbc.gridx = 0;
        gbc.gridy = 0;
        addPanel.add(new JLabel("Name:"), gbc);
        gbc.gridx = 1;
        addPanel.add(nameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        addPanel.add(new JLabel("Phone:"), gbc);
        gbc.gridx = 1;
        addPanel.add(phoneField, gbc);

        JButton addButton = createButton("Add Contact", new Color(76, 175, 80));
        addButton.addActionListener(this);
        gbc.gridwidth = 2;
        gbc.gridx = 0;
        gbc.gridy = 2;
        addPanel.add(addButton, gbc);

        tabbedPane.addTab("Add Contact", addPanel);

        // Tab for viewing and searching contacts
        JPanel viewPanel = new JPanel();
        viewPanel.setBackground(Color.WHITE);
        viewPanel.setLayout(new BorderLayout());

        JPanel searchPanel = new JPanel();
        searchPanel.setBackground(Color.WHITE);
        JButton viewButton = createButton("View Contacts", new Color(33, 150, 243));
        viewButton.addActionListener(e -> viewContacts());
        JButton searchButton = createButton("Search", new Color(255, 193, 7));
        searchButton.addActionListener(e -> searchContacts());

        searchPanel.add(new JLabel("Search:"));
        searchPanel.add(searchField);
        searchPanel.add(searchButton);
        viewPanel.add(searchPanel, BorderLayout.NORTH);
        viewPanel.add(scrollPane, BorderLayout.CENTER);
        viewPanel.add(viewButton, BorderLayout.SOUTH);

        tabbedPane.addTab("View/Search", viewPanel);

        // Tab for updating and deleting contacts
        JPanel updatePanel = new JPanel();
        updatePanel.setBackground(Color.WHITE);
        updatePanel.setLayout(new BorderLayout());

        JButton deleteButton = createButton("Delete Contact", new Color(244, 67, 54));
        deleteButton.addActionListener(e -> deleteContact());
        JButton updateButton = createButton("Update Contact", new Color(156, 39, 176));
        updateButton.addActionListener(e -> updateContact());

        JPanel updateControls = new JPanel();
        updateControls.setBackground(Color.WHITE);
        updateControls.add(deleteButton);
        updateControls.add(updateButton);
        updatePanel.add(updateControls, BorderLayout.NORTH);

        tabbedPane.addTab("Update/Delete", updatePanel);

        // Add tabbed pane to frame
        frame.add(tabbedPane, BorderLayout.CENTER);
        frame.setVisible(true);
    }

    private JButton createButton(String text, Color color) {
        JButton button = new JButton(text);
        button.setPreferredSize(new Dimension(200, 60));
        button.setFont(new Font("Arial", Font.BOLD, 16));
        button.setBackground(color);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        return button;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(Phonebook::new);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("Add Contact")) {
            String name = nameField.getText();
            String phone = phoneField.getText();
            if (!name.isEmpty() && !phone.isEmpty()) {
                Contact contact = new Contact(name, phone);
                contactListModel.addElement(contact);
                nameField.setText("");
                phoneField.setText("");
            } else {
                JOptionPane.showMessageDialog(frame, "Please enter both name and phone number.");
            }
        }
    }

    private void viewContacts() {
        contactDisplayArea.setText("");
        for (int i = 0; i < contactListModel.size(); i++) {
            contactDisplayArea.append(contactListModel.get(i) + "\n");
        }
        if (contactListModel.size() == 0) {
            contactDisplayArea.setText("No contacts to display.");
        }
    }

    private void searchContacts() {
        String search = searchField.getText().trim();
        DefaultListModel<Contact> filteredModel = new DefaultListModel<>();
        
        for (int i = 0; i < contactListModel.size(); i++) {
            Contact contact = contactListModel.get(i);
            if (contact.toString().toLowerCase().contains(search.toLowerCase())) {
                filteredModel.addElement(contact);
            }
        }
        
        contactList.setModel(filteredModel);
        if (filteredModel.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Contact not found.");
        }
    }

    private void deleteContact() {
        Contact selectedContact = contactList.getSelectedValue();
        if (selectedContact != null) {
            int response = JOptionPane.showConfirmDialog(frame,
                    "Are you sure you want to delete the selected contact?",
                    "Confirm Delete",
                    JOptionPane.YES_NO_OPTION);

            if (response == JOptionPane.YES_OPTION) {
                contactListModel.removeElement(selectedContact);
                JOptionPane.showMessageDialog(frame, "Contact deleted successfully.");
            }
        } else {
            JOptionPane.showMessageDialog(frame, "Please select a contact to delete.");
        }
    }

    private void updateContact() {
        Contact selectedContact = contactList.getSelectedValue();
        if (selectedContact != null) {
            String[] parts = selectedContact.toString().split(", ");
            String currentName = parts[0].substring(6);
            String currentPhone = parts[1].substring(7);

            String newName = JOptionPane.showInputDialog(frame, "Edit Name:", currentName);
            String newPhone = JOptionPane.showInputDialog(frame, "Edit Phone:", currentPhone);

            if (newName != null && newPhone != null) {
                selectedContact.setName(newName);
                selectedContact.setPhone(newPhone);
                contactList.repaint();
            }
        } else {
            JOptionPane.showMessageDialog(frame, "Please select a contact to update.");
        }
    }

    // Contact class
    static class Contact {
        private String name;
        private String phone;

        public Contact(String name, String phone) {
            this.name = name;
            this.phone = phone;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getPhone() {
            return phone;
        }

        public void setPhone(String phone) {
            this.phone = phone;
        }

        @Override
        public String toString() {
            return "Name: " + name + ", Phone: " + phone;
        }
    }
}


